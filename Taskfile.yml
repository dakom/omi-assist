# local dev: "task dev"
# build/deploy: "task deploy"

version: '3'

vars:
  DB_LOCAL_DIR: db/local
  DB_PROJ: DB-omi-assist
  MEDIA_DIR: "./media"

tasks:
  dev:
    deps: [frontend-dev, backend-dev]

  deploy-all:
    cmds: 
      - task frontend-deploy
      - task backend-deploy

  frontend-dev:
    deps: [frontend-localmedia-dev, frontend-dev-trunk]

  frontend-dev-trunk:
    dir: ./frontend
    cmds:
      - trunk serve --features dev,debug --watch . --watch ../shared --watch "../{{.MEDIA_DIR}}"
  
  backend-dev:
    dir: ./backend
    cmds: 
      - npx wrangler dev --env dev --port 8787 --persist-to="../{{.DB_LOCAL_DIR}}"

  ngrok: 
    cmds:
      - ngrok http --url=terrier-direct-openly.ngrok-free.app 8787

  frontend-localmedia-dev:
    dir: "{{.MEDIA_DIR}}/frontend"
    cmds: 
      - http-server --gzip --cors -p 9000

  # mostly just for checking final binary size
  backend-build-dry-run:
    dir: ./backend
    cmds: 
      - npx wrangler deploy --env prod --dry-run 

  # deploy
  deploy:
    deps: [frontend-deploy, backend-deploy]

  frontend-deploy:
    deps: [frontend-build]
    dir: ./frontend
    cmds:
      # note this does *not* use wrangler.toml
      - npx wrangler pages deploy ./dist --project-name=omi-assist

  backend-deploy:
    dir: ./backend
    cmds:
      # also builds
      - npx wrangler deploy --env prod 

  # build
  frontend-build:
    dir: ./frontend
    cmds:
      - trunk build --release
      - task: frontend-copy-media 

  frontend-copy-media:
    cmds:
      - cp -r "{{.MEDIA_DIR}}/frontend" ./frontend/dist/media

  # database - runs in backend space
  # call like: task db-migrations-create NAME=my-migration-name (e.g. init, add-users, etc.)

  db-migrations-create:
    dir: ./backend
    cmds:
      - npx wrangler d1 migrations create --env prod {{.DB_PROJ}} {{.NAME}} 

  db-migrations-list:
    dir: ./backend
    cmds:
      - npx wrangler d1 migrations list --env prod {{.DB_PROJ}} 

  db-migrations-apply-local:
    dir: ./backend
    cmds:
      - npx wrangler d1 migrations apply --env prod {{.DB_PROJ}} --local=true --remote=false  --persist-to="../{{.DB_LOCAL_DIR}}"

  db-migrations-apply-remote:
    dir: ./backend
    cmds:
      - npx wrangler d1 migrations apply --env prod {{.DB_PROJ}} --local=false --remote=true 

  # helper utils

  # run any wrangler command in worker dir
  # for example: task wrangler-api -- d1 create foo --location=weur 
  backend-wrangler:
    dir: ./backend
    cmds:
      - npx wrangler {{.CLI_ARGS}}